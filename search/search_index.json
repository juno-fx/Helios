{"config":{"lang":["en"],"separator":"[\\s\\-\\.]","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome","text":""},{"location":"#the-future-of-containerized-workstations","title":"The Future of Containerized Workstations","text":"<p>Helios is a bleeding-edge containerized workstation image designed to revolutionize the way users and system administrators deploy desktop environments. Built on the latest technologies, Helios provides a secure, efficient, and user-friendly  experience for both developers and end-users.</p>"},{"location":"#why-industry-leaders-choose-helios","title":"Why Industry Leaders Choose Helios","text":"<ul> <li> <p>Community Driven \u2014 Helios is built by the community, for the community. We welcome contributions and feedback to continuously improve the workstations.</p> </li> <li> <p>Flexible \u2014 Helios is designed to be flexible, allowing users to customize their workstations to fit their specific needs and workflows.</p> </li> <li> <p>Juno Orion Ready \u2014 Built to be run on the Juno Orion Platform, joining the continually growing list of supported workstation containers.</p> </li> <li> <p>Standalone Ready \u2014 While Helios is optimized for Juno Orion, it can also be run as a standalone container, making it versatile for various environments.</p> </li> <li> <p>Extendable \u2014 Helios is intended to be extended in many ways. From adding new features to integrating with existing tools, the possibilities are endless.</p> </li> </ul>"},{"location":"#charging-into-the-future","title":"Charging into the Future","text":"<p>Built and maintained by the same team that brought you Juno Orion, Helios is the next step in the evolution of containerized workstations. Helios is designed  to be the go-to solution for developers, scientists, artist, engineers, system administrators, and many others looking for a modern, efficient, and secure desktop  environment.</p>"},{"location":"acknowledgements/","title":"Acknowledgements","text":"<p>Helios is built on the shoulders of giants. We would like to acknowledge the following projects and teams for inspiring us:</p> <ul> <li>Selkies for providing the base VDI solution for our containerized desktops.</li> <li>Linuxserver.io for their incredible work which heavily inspires our workflow.</li> <li>just-containers for the awesome s6 overlay init system.</li> </ul>"},{"location":"build-hooks/","title":"Custom Build Hooks","text":"<p>Helios allows you to customize the build process by adding custom scripts that run at  specific points during the image build. This is useful for tasks like installing additional  software, modifying configurations, or running custom commands. The process of building a system like this can be very complex with many moving parts, so we provide a simple way to hook into that process for clean reproducible builds.</p>"},{"location":"build-hooks/#repository-layout","title":"Repository Layout","text":"<p>The repository is laid out as follows:</p> <pre><code>common\n\u2514\u2500\u2500 build &lt;- Common build scripts\n    \u2514\u2500\u2500 system.sh &lt;- Common custom system build script\n&lt;distro&gt;\n\u2514\u2500\u2500 build &lt;- Distro specific build scripts\n    \u2514\u2500\u2500 system.sh &lt;- Distro specific custom system build script\n</code></pre>"},{"location":"build-snap/","title":"Disable Firefox Snap","text":"<p>In this example, we will disable the Firefox Snap package in Helios by using the system.sh build script for Ubuntu Noble.</p>"},{"location":"build-snap/#update-noblebuildsystemsh","title":"Update <code>noble/build/system.sh</code>","text":"<p>To disable the Firefox Snap package, you can modify the <code>noble/build/system.sh</code> script to remove the apt snap preference for Firefox.</p> <pre><code>#!/bin/bash\n\nset -e\n\nexport DEBIAN_FRONTEND=noninteractive\n\ncat &gt;/etc/apt/preferences.d/firefox-no-snap &lt;&lt;EOL\nPackage: firefox*\nPin: release o=Ubuntu*\nPin-Priority: -1\nEOL\n\nsed -i '/locale/d' /etc/dpkg/dpkg.cfg.d/excludes\napt update\napt upgrade -y\napt install -y gnupg curl wget\nwget -q -O- https://packagecloud.io/dcommander/virtualgl/gpgkey |\n    gpg --dearmor &gt;/etc/apt/trusted.gpg.d/VirtualGL.gpg\necho \"deb [signed-by=/etc/apt/trusted.gpg.d/VirtualGL.gpg] https://packagecloud.io/dcommander/virtualgl/any/ any main\" &gt;/etc/apt/sources.list.d/virtualgl.list\ncurl -fsSL https://deb.nodesource.com/setup_20.x | bash -\napt update\n\n...rest of the install commands...\n</code></pre> <p>This script creates a preference file that sets the priority of the Firefox Snap package to -1, effectively disabling it. The rest of the script remains unchanged, allowing you to continue installing other packages as needed.</p>"},{"location":"build-snap/#build-the-image","title":"Build the Image","text":"<p>To build the image with the modified system script, you can run the following command:</p> <pre><code>make noble\n</code></pre> <p>This command will build the Ubuntu Noble image with the Firefox Snap package disabled. </p>"},{"location":"build-theme/","title":"Shared Theme","text":"<p>In this example, we will use the <code>common/build/system.sh</code> script to build a shared theme into Debian and RHEL based images.</p>"},{"location":"build-theme/#update-commonbuildsystemsh","title":"Update <code>common/build/system.sh</code>","text":"<p>To add a shared theme, you can modify the <code>common/build/system.sh</code> script to include the necessary commands for installing the theme. For example, if you want to install a GTK theme, you might add:</p> <pre><code>#!/bin/bash\n\nset -e\n\necho \"Common System Tools\"\n\n# install custom theme\ncd /tmp/\ngit clone https://github.com/vinceliuice/Orchis-theme.git\ncd Orchis-theme\n./install.sh -d /usr/share/themes -c dark -t orange -n Orchis -i ubuntu -s compact\n\n# install font\nmkdir -pv /usr/share/fonts/cascadia-code\ncd /tmp\nwget https://github.com/microsoft/cascadia-code/releases/download/v2407.24/CascadiaCode-2407.24.zip\nunzip CascadiaCode-2407.24.zip\nmv -v otf/static/* /usr/share/fonts/cascadia-code/\nrm -rfv /tmp/*\nfc-cache -f -v\n</code></pre> <p>This script clones a theme repository, installs the theme to the appropriate directory, and also  installs a custom font. You can modify the commands to suit your specific theme and font requirements.</p>"},{"location":"build-theme/#build-the-image","title":"Build the Image","text":"<p>To build the image with the shared theme included, you can run the following command:</p> <pre><code>make noble\n</code></pre> <p>This command will build the Ubuntu Noble image with the shared theme installed. You can replace <code>noble</code> with any other distro supported by Helios to build those images with the shared theme as well.</p>"},{"location":"code-of-conduct/","title":"Code of Conduct","text":""},{"location":"code-of-conduct/#our-pledge","title":"Our Pledge","text":"<p>In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.</p>"},{"location":"code-of-conduct/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to creating a positive environment include:</p> <ul> <li>Using welcoming and inclusive language</li> <li>Being respectful of differing viewpoints and experiences</li> <li>Gracefully accepting constructive criticism</li> <li>Focusing on what is best for the community</li> <li>Showing empathy towards other community members</li> </ul> <p>Examples of unacceptable behavior by participants include:</p> <ul> <li>The use of sexualized language or imagery and unwelcome sexual attention or advances</li> <li>Trolling, insulting/derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or electronic   address, without explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a   professional setting</li> </ul>"},{"location":"code-of-conduct/#our-responsibilities","title":"Our Responsibilities","text":"<p>Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.</p> <p>Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.</p>"},{"location":"code-of-conduct/#scope","title":"Scope","text":"<p>This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.</p>"},{"location":"code-of-conduct/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at support@juno-innovations.com. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.</p> <p>Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.</p>"},{"location":"code-of-conduct/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 1.4, available at http://contributor-covenant.org/version/\u00bc</p>"},{"location":"contributing/","title":"Guidelines","text":"<p>Contributions to Helios are welcome! We just ask that you evaluate what you actually need to adjust. This repo is not meant to provide a fully built desktop with all the bells and whistles. It is meant to provide a base image that others can build on top of. That means most changes to Helios should be geared towards adding new distros, optimizing the build process, or upgrading part of the Helios stack. If you have a specific use case that requires a change to Helios, please open an issue or a pull request with a detailed explanation of the change and why it is necessary. </p> <p>There are a few rules.</p> <ol> <li>NOTHING distro specific should ever be added to the Dockerfile.</li> <li>All builds MUST be run through the Dockerfile at the root of the repository. This ensures that the build process is consistent across all distros and all versions are uniform.</li> <li>The Dockerfile is heavily monitored for changes and any proposed changes will require a very detailed explanation of why the change is necessary and how it will affect the build process. As of right now, there is no reason to modify the Dockerfile as it provides hooks in the rest of the repo to do anything you want.</li> </ol>"},{"location":"deploy-compose/","title":"Docker Compose","text":"<p>As with the docker run example, Helios can also be deployed using Docker Compose, which allows for more complex configurations and easier management of multiple containers.</p>"},{"location":"deploy-compose/#gpu-support","title":"GPU Support","text":"<p>Helios is designed to support GPU acceleration. An example of this is to mount and access an NVIDIA GPU using the <code>nvidia-docker</code> runtime. Ensure you have the NVIDIA Container Toolkit installed to use this feature.</p> <p>An example command to run Helios with GPU support using Docker Compose is:</p> <p>Create a <code>docker-compose.yaml</code> file with the following content:</p> <p>Launch Configuration</p> <p>Be sure the also include all required environment variables as is specified in Launch Configuration.</p> <pre><code>services:\n  helios:\n    image: helios:v0.0.0-noble\n    container_name: my-helios-container\n    ports:\n      - \"3000:3000\"\n    restart: unless-stopped\n    deploy:\n      resources:\n        reservations:\n          devices:\n            - capabilities: [gpu]\n</code></pre> <p>Now, you can launch the container with GPU support:</p> <pre><code>docker compose up -d\n</code></pre>"},{"location":"deploy-compose/#custom-event-scripts","title":"Custom Event Scripts","text":"<p>In this example, we will mount a custom set of event scripts using docker compose instead of baking them into the image. This allows for easier updates and modifications without needing to rebuild the image.</p>"},{"location":"deploy-compose/#create-a-compose-file","title":"Create a Compose File","text":"<p>Create a <code>compose.yaml</code> file with the following content:</p> <p>Launch Configuration</p> <p>Be sure the also include all required environment variables as is specified in Launch Configuration.</p> <pre><code>services:\n  helios:\n    image: helios:v0.0.0-noble\n    container_name: my-helios-container\n    volumes:\n      - /path/to/my-custom-init.sh:/etc/helios/init.d/my-custom-init.sh\n      - /path/to/my-custom-service.sh:/etc/helios/services.d/custom.sh\n      - /path/to/my-custom-idle.sh:/etc/helios/idle.d/custom.sh\n    restart: unless-stopped\n</code></pre> <p>Launch the container with the custom scripts mounted:</p> <pre><code>docker compose up -d\n</code></pre>"},{"location":"deploy-docker/","title":"Docker Run","text":"<p>Helios can be deployed using Docker Run, allowing you to run the Helios container quickly for testing.</p>"},{"location":"deploy-docker/#gpu-support","title":"GPU Support","text":"<p>Helios is designed to support GPU acceleration. An example of this is to mount and access an NVIDIA GPU using the <code>nvidia-docker</code> runtime.  Ensure you have the NVIDIA Container Toolkit installed to use this feature.</p> <p>An example command to run Helios with GPU support is:</p> <p>Launch Configuration</p> <p>Be sure the also include all required environment variables as is specified in Launch Configuration.</p> <pre><code>docker run -d \\\n  --gpus all \\\n  --name my-helios-container \\\n  -p 3000:3000 \\\n  helios:v0.0.0-noble\n</code></pre>"},{"location":"deploy-docker/#custom-event-scripts","title":"Custom Event Scripts","text":"<p>In this example, we will mount a custom set of event scripts using Docker Run instead of baking them into the image. This allows for easier updates and modifications without needing to rebuild the image.</p>"},{"location":"deploy-docker/#run-the-container-with-custom-scripts","title":"Run the Container with Custom Scripts","text":"<p>Run the Docker container with the custom scripts mounted. You can use the following command:</p> <p>Launch Configuration</p> <p>Be sure the also include all required environment variables as is specified in Launch Configuration.</p> <pre><code>docker run -d \\\n  --name my-helios-container \\\n  -v /path/to/my-custom-init.sh:/etc/helios/init.d/my-custom-init.sh \\\n  -v /path/to/my-custom-service.sh:/etc/helios/services.d/custom.sh \\\n  -v /path/to/my-custom-idle.sh:/etc/helios/idle.d/custom.sh \\\n  -p 3000:3000 \\\n  helios:v0.0.0-noble\n</code></pre>"},{"location":"deploy-k8s/","title":"Kubernetes","text":"<p>Helios also supports deployment using Kubernetes, which allows for more complex configurations and easier management of multiple containers. This is particularly useful for production environments where scalability and reliability are key.</p>"},{"location":"deploy-k8s/#gpu-support","title":"GPU Support","text":"<p>Helios is designed to support GPU acceleration in Kubernetes. An example of this is to mount and access an NVIDIA GPU using the <code>Nvidia GPU Operator</code>. Ensure you have the NVIDIA Container Toolkit installed and configured in your Kubernetes cluster to use this feature.</p> <p>An example command to run Helios with GPU support in Kubernetes is:</p> <p>Launch Configuration</p> <p>Be sure the also include all required environment variables as is specified in Launch Configuration.</p> <pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: my-helios-deployment\nspec:\n    replicas: 1\n    selector:\n        matchLabels:\n          app: my-helios-app\n    template:\n        metadata:\n            labels:\n                app: my-helios-app\n        spec:\n            containers:\n              - name: helios-container\n                image: helios:v0.0.0-noble\n                ports:\n                - containerPort: 3000\n                resources:\n                    limits:\n                        nvidia.com/gpu: \"1\" # Request one GPU\n</code></pre>"},{"location":"deploy-k8s/#custom-event-scripts","title":"Custom Event Scripts","text":"<p>In this example, we will mount a custom set of event scripts using Kubernetes instead of baking them into the image. This allows for easier updates and modifications without needing to rebuild the image.</p>"},{"location":"deploy-k8s/#create-a-kubernetes-deployment","title":"Create a Kubernetes Deployment","text":"<p>Create the following deployment with the following content:</p> <p>Launch Configuration</p> <p>Be sure the also include all required environment variables as is specified in Launch Configuration.</p> <pre><code>apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: my-helios-config\ndata:\n  my-custom-idle.sh: |\n    #!/bin/sh\n    echo \"Helios has hit the idle timeout!\"\n\n  my-custom-init.sh: |\n    #!/bin/sh\n    echo \"Hello from my custom init script!\"\n\n  my-custom-service.sh: |\n    #!/bin/bash\n\n    set -e\n\n    echo\n    echo \"Helios Custom Service Initialization\"\n    echo\n    /path/to/my/custom/script.sh\n    /path/to/my/other/custom/script.sh\n    sleep infinity\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: my-helios-deployment\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: my-helios-app\n  template:\n    metadata:\n      labels:\n        app: my-helios-app\n    spec:\n      containers:\n      - name: helios-container\n        image: helios:v0.0.0-noble\n        ports:\n          - containerPort: 3000\n        volumeMounts:\n          - name: custom-scripts\n            mountPath: /etc/helios/init.d/my-custom-init.sh\n            subPath: my-custom-init.sh\n          - name: custom-services\n            mountPath: /etc/helios/services.d/custom.sh\n            subPath: my-custom-service.sh\n          - name: custom-idle\n            mountPath: /etc/helios/idle.d/custom.sh\n            subPath: my-custom-idle.sh\n      volumes:\n        - name: custom-scripts\n          configMap:\n            name: my-helios-config\n            defaultMode: 0777\n        - name: custom-services\n          configMap:\n            name: my-helios-config\n            defaultMode: 0777\n        - name: custom-idle\n          configMap:\n            name: my-helios-config\n            defaultMode: 0777\n</code></pre>"},{"location":"deploy-session/","title":"XFCE4 Session","text":"<p>Helios ships with a default <code>shutdown.d</code> script that saves the current xfce4 desktop session to the user's home directory. This allows the workstation to relaunch all applications that were running when the session was closed.</p>"},{"location":"deploy-session/#docker-compose","title":"Docker Compose","text":"<p>Docker Compose Version</p> <p><code>pre_stop</code> is only available in Docker Compose version 2.30.0 and above. Ensure you are using a compatible version. You can read more about this feature in the Docker Compose documentation.</p> <p>To enable this feature, you need to follow these steps:</p> <ol> <li>Mount a Persistent Volume: Ensure that you have a persistent volume mounted to <code>/home</code> in your container. This is where the session data will be stored.</li> <li>Add a Pre-Stop Directive: Modify your <code>compose.yaml</code> file to include a <code>pre_stop</code> directive that points to the shutdown script located at <code>/etc/helios/shutdown.d/custom.sh</code>.</li> <li>Example Compose File: Below is an example of how to set this up in your <code>compose.yaml</code> file:</li> </ol> <pre><code>services:\n  helios:\n    image: helios:v0.0.0-noble\n    container_name: my-helios-container\n    pre_stop:\n      - command: /etc/helios/shutdown.d/custom.sh\n    volumes:\n      - /path/to/persistent/home:/home\n    restart: unless-stopped\n</code></pre> <p>This will ensure that the session is saved when the container is stopped, allowing you to resume  your work on next launch.</p>"},{"location":"deploy-session/#kubernetes","title":"Kubernetes","text":"<p>In a Kubernetes environment, you can achieve similar functionality by using a <code>preStop</code> hook in your pod specification. This hook will execute the shutdown script before the container is terminated.</p> <p>To enable this feature, you need to follow these steps:</p> <ol> <li>Mount a Persistent Volume: Ensure that you have a persistent volume mounted to <code>/home</code> in your pod. This is where the session data will be stored.</li> <li>Add a Pre-Stop Hook: Modify your pod specification to include a <code>preStop</code> hook that points to the shutdown script located at <code>/etc/helios/shutdown.d/custom.sh</code>.</li> <li>Example Pod Specification: Below is an example of how to set this up in your pod specification:</li> </ol> <pre><code>apiVersion: v1\nkind: Pod\nmetadata:\n  name: my-helios-pod\nspec:\n    containers:\n    - name: helios\n      image: helios:v0.0.0-noble\n      volumeMounts:\n        - name: home-volume\n          mountPath: /home\n      lifecycle:\n        preStop:\n          exec:\n            command: [\"/etc/helios/shutdown.d/custom.sh\"]\n    volumes:\n        - name: home-volume\n          persistentVolumeClaim:\n            claimName: my-pvc\n</code></pre> <p>This will ensure that the session is saved when the pod is terminated, allowing you to resume your work on next launch.</p>"},{"location":"deploy-session/#example-workflow","title":"Example Workflow","text":"<p>Here is an example workflow for using session persistence with Helios:</p> <ol> <li>Launch a Helios Container: Start your Helios container with the necessary configurations as described above.</li> <li>Run Your Applications: Use the Helios desktop environment to run your applications as you normally would.    </li> <li>Shutdown the Container: When you are done, shut down the container. The shutdown script will automatically save your session.    </li> <li>Select a Different Helios Container Distro: If you want to switch to a different Helios container distro, such as Rocky Linux, you can do so without losing your session.</li> <li>Launch the New Container: Start the new Helios container with the same persistent volume mounted to <code>/home</code>.</li> <li>Resume Your Session: The new container will automatically restore your previous session, allowing you to continue where you left off.    </li> </ol>"},{"location":"deploy-usage/","title":"Launch Configuration","text":""},{"location":"deploy-usage/#environment-variables","title":"Environment Variables","text":"<p>Environment variables are used to configure the Helios container. The following environment variables are available:</p> Name Value Required USER Name of the user X UID POSIX compliant uid for the user X GID POSIX compliant gid for the user PASSWORD Password set for the user IDLE_TIME Trigger the idle hook after x time DISABLE_VGL Disable VirtualGL Wrapper around the entire desktop session. You will need to manually run applications that require it via <code>vglrun</code> DESKTOP_FILES Paths seperated by \":\". For example, <code>/some/path/1/*.desktop:/some/*/2/*.desktop</code> PREFIX Prefix for URL for use behind a reverse proxy <p>Info</p> <p>The <code>GID</code> will match the <code>UID</code> if not specified.</p> <p>UID and GID</p> <p>The <code>UID</code> and <code>GID</code> are NOT the user that is launching and running the container.  Because of s6, the container always starts and runs as root. It then uses s6 to run the desktop using the specified  user using those environment variables. This is done to ensure that the desktop has the correct permissions and  ownership on things like the home directory and other files. This helps with things like Network Shares as well.</p> <p>Authentication</p> <p>Helios DOES NOT provide any authentication for connecting to the workstation. This means that anyone who can connect to the http endpoint can access the desktop as that user. For proper security, we recommend using a  reverse proxy with authentication in front of Helios. This can be done using Nginx, Traefik, or any other  reverse proxy that supports authentication.</p> <p>Security is a very important part of any deployment and it isn't a one size fits all solution. Instead of shipping Helios with a specific authentication method, we leave it up to the user to implement their own security measures that best fit their deployment. This allows for more flexibility and customization in how Helios is used.</p>"},{"location":"deploy-usage/#endpoints","title":"Endpoints","text":"<p>Helios provides 1 endpoint for accessing the desktop:</p> Endpoint Description <code>{PREFIX}/</code> The main interactive endpoint"},{"location":"deploy-usage/#ports","title":"Ports","text":"<p>Helios exposes the following ports:</p> Port Description 3000 HTTPS Desktop Port"},{"location":"event-hooks/","title":"Custom Event Hooks","text":"<p>Helios allows you to hook into different events during the runtime of the container. The following hooks are available:</p> <ul> <li><code>init</code>: This is run before everything else in the container. It is useful for setting up system files at runtime before user creation. You can also use this hook to initialize things like AD federation via something like SSSD.</li> <li><code>services</code>: This is run after the user is created and the system is initialized. It is useful for starting custom services that need to run in the container.</li> <li><code>idle</code>: This is run when the container has been idle. Idle is defined by <code>xssstate</code> being idle for a certain amount of time. This tracks mouse and keyboard activity. You can use this hook to run custom scripts when the container is idle, such as auto shutdown.</li> </ul>"},{"location":"event-hooks/#installing-event-hooks","title":"Installing Event Hooks","text":"<p>You have a few options for installing event hooks. You can mount them in to the container at runtime, or you can include them in the rootfs during the build process. Juno for example, mounts a custom <code>idle</code> script into the container at runtime to auto shutdown the container after a certain amount of time being idle. This is done  by mounting the script into the container at <code>/etc/helios/idle.d/custom.sh</code>.</p> <p>We have seen other users include a custom <code>init</code> script in the rootfs during the build process which will trigger a SSSD setup for AD federation. This is done by adding a script to the <code>common/root/etc/helios/init.d/</code> directory.</p>"},{"location":"event-hooks/#initd-directory","title":"init.d Directory","text":"<p>The <code>init.d</code> directory is where you can place your custom scripts that will be run during the <code>init</code> event. You can create a script in this directory and it will be executed when the container starts. The script should be executable and can contain any commands you need to run at startup.</p> <p>Note</p> <p>If the script is not executable, Helios will try to make it executable. If it fails, it will then try to pass the script directly to bash to execute it. If this all fails, it will log an error and skip the script. This will NOT stop the container from starting, but it will log an error message.</p>"},{"location":"event-hooks/#servicesd-directory","title":"services.d Directory","text":"<p>The <code>services.d</code> directory is a little different from the <code>init.d</code> directory. Because of how <code>s6-overlay</code> works, we can't dynamically launch services on demand. Because of this, we execute the existing <code>custom.sh</code> script in the <code>services.d</code> directory. This script should contain the commands to start your custom services. It is executed after the user is created and the system is initialized.</p> <p>Note</p> <p>It is worth noting that this does mean you are responsible for monitoring and restarting your own services if they fail.</p>"},{"location":"event-hooks/#idled-directory","title":"idle.d Directory","text":"<p>Like the <code>services.d</code> directory, the <code>idle.d</code> directory is executed by the <code>custom.sh</code> script. This script should contain the commands to run when the container is idle. The script is executed when the container has been idle for a certain amount of time, as defined by <code>xssstate</code>. You can use this hook to run custom scripts when the container is idle, such as auto shutdown or other maintenance tasks.</p>"},{"location":"event-idle/","title":"Custom Idle","text":"<p>In this example, we will create a custom idle script for Debian and RHEL based images to run a specific command when the system is idle.</p>"},{"location":"event-idle/#update-commonrootetcheliosidledcustomsh","title":"Update <code>common/root/etc/helios/idle.d/custom.sh</code>","text":"<p>Modify the existing <code>common/root/etc/helios/idle.d/custom.sh</code> script. This script will be executed when the system is idle.</p> <pre><code>#!/bin/bash\n\nset -e\n\necho \"Running custom idle script...\"\n\n# Add your custom commands here\necho \"Custom idle script completed.\"\n</code></pre> <p>Make sure to give the script executable permissions:</p> <pre><code>chmod +x common/root/etc/helios/idle.d/custom.sh\n</code></pre>"},{"location":"event-idle/#build-the-image","title":"Build the Image","text":"<p>To build the image with the custom idle script included, you can run the following command:</p> <pre><code>make noble\n</code></pre> <p>This command will build the Ubuntu Noble image with the custom idle script installed. You can replace <code>noble</code> with any other distro supported by Helios to build those images with the custom idle script as well.</p>"},{"location":"event-init/","title":"Custom Init","text":"<p>In this example, we will create a custom init script for Debian and RHEL based images to run a specific command at startup.</p>"},{"location":"event-init/#update-commonrootetcheliosinitd","title":"Update <code>common/root/etc/helios/init.d/</code>","text":"<p>To add a custom init script, you can create a new file in the <code>common/root/etc/helios/init.d/</code> directory. For example, let's create a script named <code>custom-init.sh</code>:</p> <pre><code>#!/bin/bash\n\nset -e\n\necho \"Running custom init script...\"\n\n# Add your custom commands here\necho \"Custom init script completed.\"\n</code></pre> <p>Make sure to give the script executable permissions:</p> <pre><code>chmod +x common/root/etc/helios/init.d/custom-init.sh\n</code></pre>"},{"location":"event-init/#build-the-image","title":"Build the Image","text":"<p>To build the image with the custom init script included, you can run the following command:</p> <pre><code>make noble\n</code></pre> <p>This command will build the Ubuntu Noble image with the custom init script installed. You can replace <code>noble</code> with any other distro supported by Helios to build those images with the custom init script as well.</p>"},{"location":"event-service/","title":"Custom Services","text":"<p>In this example, we will create a custom service for Debian and RHEL based images to run a specific command as a service.</p>"},{"location":"event-service/#update-commonrootetcheliosservicesdcustomsh","title":"Update <code>common/root/etc/helios/services.d/custom.sh</code>","text":"<p>Modify the existing <code>common/root/etc/helios/services.d/custom.sh</code> script. This script is triggered during the boot up process in Helios.</p> <pre><code>#!/bin/bash\n\nset -e\n\necho \"Running custom service script...\"\n\n# Add your custom commands here\necho \"Custom service script completed.\"\n</code></pre> <p>Note</p> <p>You can use this to launch multiple services as well. Just keep in mind that this script is the entrypoint that is triggered from <code>s6</code>.</p> <p>Make sure to give the script executable permissions: <pre><code>chmod +x common/root/etc/helios/services.d/custom.sh\n</code></pre></p>"},{"location":"event-service/#build-the-image","title":"Build the Image","text":"<p>To build the image with the custom service script included, you can run the following command:</p> <pre><code>make noble\n</code></pre> <p>This command will build the Ubuntu Noble image with the custom service script installed. You can replace <code>noble</code> with any other distro supported by Helios to build those images with the custom service script as well.</p>"},{"location":"getting-started/","title":"Getting Started","text":""},{"location":"getting-started/#prerequisites","title":"Prerequisites","text":"<p>To get started with Helios, you need to have the following prerequisites:</p> <ul> <li>Docker: Docker is used to build the workstations. Install Docker from the Docker website.</li> <li>Devbox: Devbox is used to manage development environments. You can install it from the Devbox website.</li> <li>Git: Ensure you have Git installed to clone the repository. You can download it from the Git website.</li> </ul>"},{"location":"getting-started/#repository-setup","title":"Repository Setup","text":"<p>To set up your Helios repository, follow these steps:</p> <ol> <li> <p>Clone the Helios Repository: This repository contains the tooling needed to build and modify Helios.</p> <p>git clone https://github.com/juno-fx/Helioscd Heliosgit checkout 999-my-branch</p> </li> <li> <p>Activate Devbox: Juno ships a full Devbox environment to help you get started quickly. Activate it by running:</p> <p>devbox shellStarting a devbox shell...Requirement already satisfied: uv in ./.venv/lib/python3.12/site-packages (0.7.9)[notice] A new release of pip is available: 24.3.1 -&gt; 25.1.1[notice] To update, run: pip install --upgrade pipAudited 4 packages in 1ms</p> </li> <li> <p>Launch Basic Workstation: Juno provides a <code>Makefile</code> target that is pre-configured for each Helios distro. You can launch the basic workstation by running:</p> <p>make noble</p> </li> </ol>"},{"location":"getting-started/#helios-structure","title":"Helios Structure","text":"<p>The repository is laid out as follows.</p> <pre><code>common\n\u251c\u2500\u2500 build &lt;- Common build scripts for all distros\n\u2514\u2500\u2500 root &lt;- Modified rootfs for all distros\n&lt;distro&gt;\n\u251c\u2500\u2500 build &lt;- Distro specific build scripts\n\u2514\u2500\u2500 root &lt;- Distro specific rootfs\npackages\n\u2514\u2500\u2500 system.yaml &lt;- Package definitions for the Unified Package Management System\n</code></pre>"},{"location":"install-firefox/","title":"Add Firefox","text":"<p>In this example, we will add Firefox to the package management system and build it into debian/rhel based images.</p>"},{"location":"install-firefox/#update-packagesyaml","title":"Update <code>packages.yaml</code>","text":""},{"location":"install-firefox/#packages-section","title":"<code>packages</code> Section","text":"<p>Each item in the <code>packages</code> array defines a single logical package, and includes distro-specific keys for the corresponding package names:</p> <pre><code>packages:\n  - noble: firefox\n    jammy: firefox\n    debian: firefox-esr\n    kali: firefox-esr\n    sid: firefox-esr\n    rhel: firefox\n</code></pre> <p>We map Firefox to the appropriate package names for each distro. For example, <code>firefox</code> for Alpine and RHEL, and <code>firefox-esr</code> for Debian, Kali, and Sid.</p>"},{"location":"install-firefox/#build-the-image","title":"Build the Image","text":"<p>To build the image with Firefox included, you can run the following command:</p> <pre><code>make noble\n</code></pre> <p>This command will build the Ubuntu Noble image with Firefox installed. You can replace <code>noble</code> with any other distro supported by Helios to build those images with Firefox as well.</p>"},{"location":"install-htop/","title":"Add htop","text":"<p>In this example, we will add htop to the package management system and build it into debian/rhel based images.</p>"},{"location":"install-htop/#update-packagesyaml","title":"Update <code>packages.yaml</code>","text":""},{"location":"install-htop/#packages-section","title":"<code>packages</code> Section","text":"<p>Each item in the <code>packages</code> array defines a single logical package, and includes distro-specific keys for the corresponding package names:</p> <pre><code>packages:\n  - common: htop\n</code></pre> <p>This maps <code>htop</code> to the common package name, which will be used across all distros.</p>"},{"location":"install-htop/#build-the-image","title":"Build the Image","text":"<p>To build the image with htop included, you can run the following command:</p> <pre><code>make noble\n</code></pre> <p>This command will build the Ubuntu Noble image with htop installed. You can replace <code>noble</code> with any other distro supported by Helios to build those images with htop as well.</p>"},{"location":"install-logo/","title":"Custom Logo","text":"<p>The Helios \"Start Menu\" logo can be customized by replacing the <code>common/root/usr/share/themes/helios-logo.png</code> file with your own image. This logo will be displayed in the Helios start menu and other places where the Helios logo is used.</p>"},{"location":"install-logo/#update-default-logo","title":"Update Default Logo","text":"<p>Download your favorite logo and replace the <code>common/root/usr/share/themes/helios-logo.png</code> file with your custom image. This file will be used as the default logo for all distros.</p>"},{"location":"install-logo/#build-the-image","title":"Build the Image","text":"<p>To build the image with your custom logo included, you can run the following command:</p> <pre><code>make noble\n</code></pre> <p>This command will build the Ubuntu Noble image with your custom logo. You can replace <code>noble</code> with any other distro supported by Helios to build those images with your custom logo as well.</p>"},{"location":"install-wallpaper/","title":"Custom Wallpaper","text":"<p>In this example, we will add a custom wallpaper to the Helios root filesystem and build it into Alpine, Debian, and RHEL based images.</p>"},{"location":"install-wallpaper/#update-default-wallpaper","title":"Update Default Wallpaper","text":"<p>Download your favorite wallpaper and replace the <code>common/root/usr/share/backgrounds/background.jpg</code> file with your custom image. This file will be used as the default wallpaper for all distros.</p>"},{"location":"install-wallpaper/#build-the-image","title":"Build the Image","text":"<p>To build the image with your custom wallpaper included, you can run the following command:</p> <pre><code>make noble\n</code></pre> <p>This command will build the Ubuntu Noble image with your custom wallpaper. You can replace <code>noble</code> with any other distro supported by Helios to build those images with your custom wallpaper as well.</p>"},{"location":"package-management/","title":"Package Management","text":"<p>To streamline cross-distro package management, Helios uses a centralized <code>packages/system.yaml</code> system. This allows each logical package to be mapped to its appropriate name for each Linux distribution, while also enabling distros to inherit shared definitions from one or more package groups.</p>"},{"location":"package-management/#migrate-from-packagesyaml","title":"Migrate from <code>packages.yaml</code>","text":"<p>Previously, Helios used a singular <code>packages.yaml</code> file which had all packages defined. With new system builds required, it became clear that the packaging system can be used to also track build dependencies. The following changes have been made:</p> <ul> <li>The old <code>packages.yaml</code> file has been renamed to <code>packages/system.yaml</code>.</li> <li>The <code>inherit</code> section has now been pulled out into its own file <code>packages/inherit.yaml</code>.</li> <li>Support for custom lists is now supported. i.e. <code>packages/my-list.yaml</code>. You then can add this to the <code>packages/inherit.yaml</code>.</li> </ul>"},{"location":"package-management/#structure-of-packagessystemyaml","title":"Structure of <code>packages/system.yaml</code>","text":""},{"location":"package-management/#packages-section","title":"<code>packages</code> Section","text":"<p>Each item in the <code>packages</code> array defines a single logical package, and includes distro-specific keys for the corresponding package names:</p> <pre><code>packages:\n  - debian: mesa-va-drivers        # VA-API support for Debian\n    rhel: mesa-va-drivers          # Same package name for RHEL\n\n  - debian: libx11-6\n    rhel: libX11\n\n  - debian: extra-debian-only-pkg\n</code></pre> <p>This format enables clean mapping between distros for the same logical dependency, and avoids repeating similar entries in multiple places.</p>"},{"location":"package-management/#packagesinherityaml-section","title":"<code>packages/inherit.yaml</code> Section","text":"<p>This section defines which groups of package mappings each distro should inherit from.</p> <pre><code>inherit:\n  ubuntu:\n    - common\n    - debian\n  debian:\n    - common\n  rhel:\n    - common\n</code></pre> <p>In this example:</p> <ul> <li>Ubuntu inherits all packages defined under the <code>common</code> and <code>debian</code> groups.</li> <li>RHEL, Debian, and Alpine all inherit from the <code>common</code> group.</li> <li>Each distro may also have its own explicitly defined packages.</li> </ul>"},{"location":"package-management/#package-list-generation","title":"Package List Generation","text":"<p>A preprocessing step flattens the data into a list of packages, combining:</p> <ol> <li>All package mappings from the inherited groups</li> <li>Any mappings explicitly defined for that distro</li> </ol> <p>Each distro\u2019s final list is saved as:</p> <pre><code>/lists/&lt;name&gt;.list\n</code></pre> <p>For example, <code>/lists/ubuntu.list</code> will include packages from: - The <code>common</code> group - The <code>debian</code> group - Any Ubuntu-specific entries (if present)</p>"},{"location":"package-management/#build-integration","title":"Build Integration","text":"<p>These generated lists are used directly in the image build process. Example from <code>alma-9/build/system.sh</code>:</p> <pre><code>dnf install -y --allowerasing --setopt=install_weak_deps=False --best \\\n  $(cat /lists/rhel.list) \\\n  fastfetch\n</code></pre> <p>This example installs the complete set of packages for a RHEL-based image (including inherited packages from <code>common</code>).</p>"},{"location":"rootfs/","title":"Root Filesystem","text":"<p>Helios provides rootfs modifications for each distro as well as common modifications that apply to all distros.</p>"},{"location":"rootfs/#structure","title":"Structure","text":"<p>The repository is laid out as follows:</p> <pre><code>common\n\u2514\u2500\u2500 root &lt;- Modified rootfs for all distros\n&lt;distro&gt;\n\u2514\u2500\u2500 root &lt;- Distro specific rootfs\n</code></pre>"},{"location":"rootfs/#common-rootfs","title":"Common Rootfs","text":"<p>The <code>common/root</code> directory contains files that are shared across all distros. This includes configuration files,  scripts, and other resources that are common to the Helios environment. This is where we normally place shared  themes and other common files that should be present in all distros. </p>"},{"location":"rootfs/#distro-specific-rootfs","title":"Distro Specific Rootfs","text":"<p>Each distro has its own <code>root</code> directory that contains files specific to that distro. This allows for customization of the root filesystem for each distribution while still maintaining a common base. For example, we may want to modify repository sources for a specific distro or disable snap preferences in only Ubuntu distros.</p>"},{"location":"related/related-docs/","title":"Related Documentation","text":"<p>Welcome to the Juno Innovations documentation ecosystem. Our documentation is organized across three main areas to help you find exactly what you need.</p>"},{"location":"related/related-docs/#documentation-sites","title":"Documentation Sites","text":"<p>Platform Documentation</p> <p>Workstation Documentation</p> <p>Plugin Development</p>"},{"location":"related/related-docs/#orion-documentation","title":"Orion Documentation","text":"<p>The main platform documentation covering:</p> <ul> <li>Installation and deployment guides</li> <li>Product overviews (Genesis, Hubble, Terra)</li> <li>API reference and integration examples</li> <li>Operations and management</li> </ul> <p>Best for: System administrators, DevOps engineers, and anyone setting up or managing the Juno platform.</p>"},{"location":"related/related-docs/#helios-workstations","title":"Helios Workstations","text":"<p>Complete guide to building and customizing workstations:</p> <ul> <li>Getting started with workstation creation</li> <li>Package management and customization</li> <li>Filesystem modifications</li> <li>Build and event hooks</li> <li>Deployment strategies</li> </ul> <p>Best for: Developers and administrators creating custom workstation images.</p>"},{"location":"related/related-docs/#terra-official-plugins","title":"Terra Official Plugins","text":"<p>Everything you need to know about Terra plugins:</p> <ul> <li>Plugin development workflow</li> <li>Configuration and best practices</li> <li>Complete plugin catalog by category</li> <li>Community contribution guidelines</li> </ul> <p>Best for: Developers creating or customizing Terra plugins for specific workflows.</p>"},{"location":"related/related-docs/#quick-links","title":"Quick Links","text":"<p>External Resources</p> <ul> <li>GitHub Organization: github.com/juno-fx</li> <li>Docker Hub: hub.docker.com/u/junoinnovations</li> <li>LinkedIn: Juno Innovations Company Page</li> <li>Discord: Discord Community</li> </ul>"},{"location":"related/related-docs/#need-help","title":"Need Help?","text":"<p>If you can't find what you're looking for:</p> <ol> <li>Use the search function (press <code>/</code> to focus)</li> <li>Check the FAQ sections in each documentation site</li> <li>Reach out to our support team</li> <li>Join our community discussions on GitHub</li> </ol> <p>All documentation is kept up-to-date with the latest releases. For version-specific documentation, use the version selector in the header of each site.</p>"}]}